Prerequisites
=============

In order to compile and use this package, the system must be of the
following type:

  1. An UltraSPARC based system.

  2. The operating system must be Solaris 2.5 or higher.

The following tools will be required to compile this package:

  1. GNU make.  Other makes may or may not work.

  2. GNU binutils.  This is not actually necessary if you are not
     building the interpreter, which is not built by default.

  3. GCC.  Versions higher than 2.7.x should work.

Finally, to actually use the package, the class library
(`classes.zip') included in Sun's JDK 1.1.x will be required.


Basic Installation
==================

The simplest way to compile this package is:

  1. Change the current directory to the directory containing the
     package's source code and type `./configure' to configure the
     package for your system.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the program, the libraries, and
     any data files and documentation.

  4. The location of the Java class library from Sun's JDK 1.1.x
     (`classes.zip') must be included in the environment variable
     `CLASSPATH' when actually using this package.  For example, if
     the class library is located at `/usr/lib/java/classes.zip', the
     `CLASSPATH' variable should be `/usr/lib/java/classes.zip:.'.

  5. When dynamic linking is enabled, which is the default, the
     library search path (`LD_LIBRARY_PATH') should include the
     appropriate directory when actually using this package, which is
     `/usr/local/lib' by default.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer, or with another configuration),
     type `make distclean'.  There is also a `make maintainer-clean'
     target, but that is intended mainly for the package's developers.
     If you use it, you may have to get all sorts of other programs in
     order to regenerate files that came with the distribution.


Compiling For Multiple Configurations and Architectures
=======================================================

You can compile the package for more than one type of configuration or
architecture concurrently, by placing the object files for each
configuration and architecture in their own directory.  To do this,
change to the directory where you want the object files and
executables to go and run the `configure' script in the source
directory.  `configure' automatically checks for the source code in
the directory that `configure' is in and in `..'.


Installation Names
==================

By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If
you give `configure' the option `--exec-prefix=PATH', the package will
use PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for
particular kinds of files.  Run `configure --help' for a list of the
directories you can set and what kinds of files go in them.

You can cause programs to be installed with an extra prefix or suffix
on their names by giving `configure' the option
`--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.


Optional Features
=================

Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  A list
of such options are appended at the end of this file.

Replacing `enable' with `disable' and `with' with `without' in these
options turn off the corresponding features.


Sharing Defaults
================

If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.


Operation Controls
==================

`configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.


Package Specific Options
========================

`--enable-interpreter'
     Build the interpreter.  If the interpreter is built along with
     the translator, then the interpreter will be used for class
     initialization and initial execution of methods.

`--enable-translator'
     Build the bytecode to native code translator.  Enabled by default.

`--enable-inline-cache'
     Use inline cache when making method calls.  Enabled by default.

`--enable-type-analysis'
     Include type analysis in the translator, which is used for
     certain optimizations.  Enabled by default.

`--enable-customization'
     Do customization of methods based on types.  Enabled by default.

`--enable-debug'
     Turn on debugging support.

`--enable-gprof'
     Enable support for profiling with gprof.

`--enable-call-profile'
     Turn on method call profiling.

`--enable-bytecode-prof'
     Turn on bytecode profiling.

`--enable-dynamic'
     Build the package as a shared library, and include support for
     dynamic linking.  Enabled by default.
